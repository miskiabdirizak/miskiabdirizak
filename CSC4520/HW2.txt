Q1 Mysterious Function (30 point)
What's the worst case runtime of the following function? Please remember to define n, provide a
tight upper bound.

public static void mystery1(int z) {
    System.out.println(z);
    if (z >= 10) {
        mystery1(z/10);
        System.out.println(z);
    }
}
Answer: 
O(Log N), where N = int z. Since the recursive function is divided by 10 each time, we're making the 
problem smaller each time we call it for a total of N recursive calls. The tight upper-bound is the 
same as the worst case because the function runs atleat n/10 and at most n/10 for every call. 

T(n) = T(n/10) + c 
T(n) = T(n/10) + 1  => T(n/10^k) + kv
k = Log10b 
T(n) = log10n


---------------------------------------------------------------------------------------------------------------------
Q2 Exponentiation (Fast?) (40 points)
●What’s the best case, worst case, and average-case runtime of pow? Assume n =
power. Please remember to define n, provide a tight upper bound.

algorithm pow
Input: positive integer b, non-negative integer p
Output: computing b^p (i.e. b raised to power of p)

if p = 0
    return 1
else if p = 1
    return b
else if p is even
    temp = pow(b, p / 2)
    return temp * temp
else
    return b * b * pow(b, p-2)

Answer: 
Best Case: O(1). The best case occurs when p=0.
T(n) = t(n/2) + 1 => O(logn)

Worst Case: O(n). The worst case is when p is odd.
T(n) = T(n-2)+ 1
     = T(1) + 1 + 1 + ... +1 => n/2 times
     = O(n)

Average Case: O(n). The average case is when num of odd and even numbers is the same
O((n + logn)/2) = O(n)

---------------------------------------------------------------------------------------------------------------------

Q3 QuickSort (30 point)
Given the QuickSort implementation from class, provide an 18-element list that will take the
least number of recursive calls of QuickSort to complete.
As a counter-example, here is a list that will cause QuickSort to make the MOST number of
recursive calls:

public static List<Integer> input() {
    return Arrays.asList(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
}

And here’s the QuickSort algorithm, for convenience:

algorithm QuickSort
Input: lists of integers lst of size N
Output: new list with the elements of lst in sorted order

if N < 2
    return lst
pivot = lst[N-1]
left = new empty list
right = new empty list
for index i = 0, 1, 2, ... N-2
    if lst[i] <= pivot
        left.add(lst[i])
    else
        right.add(lst[i])
return QuickSort(left) + [pivot] + QuickSort(right)

Answer: 
The best case for QuickSort occurs when the pivot is balanced right in the middle. The worst case for QuickSort
occurs when the input is already sorted. Thus, an input like [8 1 3 2 6 5 7 4 10 9 12 11 14 13 15 17 18] will take 
QuickSort the least amount of steps. 

]